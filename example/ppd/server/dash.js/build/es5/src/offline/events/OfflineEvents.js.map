{"version":3,"sources":["../../../../../src/offline/events/OfflineEvents.js"],"names":["OfflineEvents","DOWNLOADING_PAUSED","DOWNLOADABLE_REPRESENTATIONS_LOADED","DASH_ELEMENTS_CREATION_NEEDED","DOWNLOADING_STARTED","DOWNLOADING_STOPPED","DOWNLOADING_FINISHED","EventsBase","offlineEvents"],"mappings":"sEAAA,2D,u7BACA;;;;MAKMA,c,4DACF,wBAAe,2JAGX,MAAKC,kBAAL,CAA0B,mBAA1B,CAEA;;;WAIA,MAAKC,mCAAL,CAA2C,8CAA3C,CAEA,MAAKC,6BAAL,CAAqC,4BAArC,CAEA;;UAGA,MAAKC,mBAAL,CAA2B,2BAA3B,CAEA;;;UAIA,MAAKC,mBAAL,CAA2B,2BAA3B,CAEA;;;UAIA,MAAKC,oBAAL,CAA4B,4BAA5B,CA5BW,aA6Bd,C,uBA9BuBC,oB,EAiC5B,GAAIC,eAAgB,GAAIR,cAAJ,EAApB,C,gBACeQ,a","file":"OfflineEvents.js","sourcesContent":["import EventsBase from './../../core/events/EventsBase';\n/**\n * These are offline events that should be sent to the player level.\n * @class\n * @ignore\n */\nclass OfflineEvents extends EventsBase {\n    constructor () {\n        super();\n\n        this.DOWNLOADING_PAUSED = 'downloadingPaused';\n\n        /**\n         * Triggered when all mediaInfo has been loaded on OfflineStream\n         * Return a list of available bitrateInfo needed to download stream.\n         */\n        this.DOWNLOADABLE_REPRESENTATIONS_LOADED = 'public_downloadableRepresentationsInfoLoaded';\n\n        this.DASH_ELEMENTS_CREATION_NEEDED = 'dashElementsCreationNeeded';\n\n        /** Triggered when the downloading is initialize and started\n        * @event OfflineEvents#DOWNLOADING_STOPPED\n        */\n        this.DOWNLOADING_STARTED = 'public_downloadingStarted';\n\n        /**\n        * Triggered when the user stop current downloading\n        * @event OfflineEvents#DOWNLOADING_STOPPED\n        */\n        this.DOWNLOADING_STOPPED = 'public_downloadingStopped';\n\n        /**\n        * Triggered when all fragments has been downloaded\n        * @event OfflineEvents#DOWNLOADING_FINISHED\n        */\n        this.DOWNLOADING_FINISHED = 'public_downloadingFinished';\n    }\n}\n\nlet offlineEvents = new OfflineEvents();\nexport default offlineEvents;\n"]}