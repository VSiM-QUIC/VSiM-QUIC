{"version":3,"sources":["../../../../src/streaming/Stream.js"],"names":["Stream","config","context","eventBus","getInstance","urlUtils","manifestModel","mediaPlayerModel","manifestUpdater","adapter","capabilities","errHandler","timelineConverter","dashMetrics","abrController","playbackController","mediaController","textController","videoModel","settings","instance","logger","streamProcessors","isStreamActivated","isMediaInitialized","streamInfo","updateError","isUpdating","protectionController","fragmentController","thumbnailController","eventController","preloaded","boxParser","debug","trackChangedEvent","codecCompatibilityTable","setup","getLogger","resetInitialSettings","create","dashConstants","DashConstants","registerEvents","on","Events","BUFFERING_COMPLETED","onBufferingCompleted","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","unRegisterEvents","off","registerProtectionEvents","KEY_ERROR","onProtectionError","SERVER_CERTIFICATE_UPDATED","LICENSE_REQUEST_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SESSION_CREATED","KEY_STATUSES_CHANGED","unRegisterProtectionEvents","initialize","StreamInfo","ProtectionController","activate","mediaSource","previousBuffers","result","CURRENT_TRACK_CHANGED","onCurrentTrackChanged","getPreloaded","initializeMedia","initializeAfterPreload","deactivate","keepBuffers","ln","length","errored","i","fragmentModel","getFragmentModel","removeExecutedRequestsBeforeTime","getStartTime","getDuration","reset","setPreloaded","isActive","setMediaSource","isMediaSupported","getMediaInfo","splice","dischargePreBuffer","msg","error","DashJSError","Errors","MANIFEST_ERROR_ID_NOSTREAMS_CODE","getValue","fatal","stopEventController","pause","duration","NaN","start","getId","id","getStreamInfo","getFragmentController","getThumbnailController","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getBitrateListFor","type","IMAGE","getBitrateList","mediaInfo","startEventController","stop","event","message","codec","MUXED","MANIFEST_ERROR_ID_MULTIPLEXED_CODE","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","contentProtection","supportsEncryptedMedia","CAPABILITY_MEDIAKEYS_ERROR_CODE","CAPABILITY_MEDIAKEYS_ERROR_MESSAGE","supportsCodec","e","newMediaInfo","manifest","setCurrentMediaInfo","processor","getProcessorForMediaInfo","currentTime","getTime","info","refreshManifestOnSwitchTrack","refreshManifest","selectMediaInfo","updateTopQualityIndex","switchTrackAsked","abortRequests","getScheduleController","setSeekTarget","setIndexHandlerTime","resetIndexHandler","createStreamProcessor","allMediaForType","optionalSettings","streamProcessor","mimeType","baseURLController","stream","streamController","setBuffer","buffer","replaceIdx","push","ignoreMediaInfo","idx","index","addMediaInfo","initializeMediaForType","getAllMediaInfoForType","initialMediaInfo","addEmbeddedTrack","addTrack","getTracksFor","events","getTextDefaultEnabled","checkInitialMediaSettingsForType","getCurrentTrackFor","trigger","STREAM_INITIALIZING","initializeEventController","setConfig","addInlineEvents","getEventsFor","addInbandEvents","element","getElement","filterCodecs","VIDEO","AUDIO","test","nodeName","buffers","createBuffers","checkIfInitializationCompleted","realAdaptation","getAdaptationForType","Array","isArray","Representation_asArray","filter","_","getCodec","hasError","audio","video","DATA_UPDATE_FAILED_ERROR_CODE","DATA_UPDATE_FAILED_ERROR_MESSAGE","getType","initializeForMedia","STREAM_INITIALIZED","createBuffer","getBuffer","processors","getProcessors","warn","isBufferingCompleted","STREAM_BUFFERING_COMPLETED","sender","getStreamId","arr","updateData","updatedStreamInfo","getMediaInfoForType","oldMediaInfo","undefined","isMediaCodecCompatible","newStream","compareCodecs","isProtectionCompatible","compareProtectionConfig","newStreamInfo","currentStreamInfo","newAdaptation","currentAdaptation","ContentProtection","sameMimeType","oldCodecs","map","representation","codecs","newCodecs","codecMatch","some","newCodec","indexOf","partialCodecMatch","oldCodec","codecRootCompatibleWithCodec","codec1","codec2","codecRoot","split","rootCompatible","compatTableCodec","compatibleCodecs","compatibleCodec","value","preload","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"Stream.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport StreamProcessor from './StreamProcessor';\nimport EventController from './controllers/EventController';\nimport FragmentController from './controllers/FragmentController';\nimport ThumbnailController from './thumbnail/ThumbnailController';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashJSError from './vo/DashJSError';\nimport BoxParser from './utils/BoxParser';\nimport URLUtils from './utils/URLUtils';\n\nfunction Stream(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    const manifestModel = config.manifestModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const manifestUpdater = config.manifestUpdater;\n    const adapter = config.adapter;\n    const capabilities = config.capabilities;\n    const errHandler = config.errHandler;\n    const timelineConverter = config.timelineConverter;\n    const dashMetrics = config.dashMetrics;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const mediaController = config.mediaController;\n    const textController = config.textController;\n    const videoModel = config.videoModel;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        streamProcessors,\n        isStreamActivated,\n        isMediaInitialized,\n        streamInfo,\n        updateError,\n        isUpdating,\n        protectionController,\n        fragmentController,\n        thumbnailController,\n        eventController,\n        preloaded,\n        boxParser,\n        debug,\n        trackChangedEvent;\n\n    const codecCompatibilityTable = [\n        {\n            'codec': 'avc1',\n            'compatibleCodecs': ['avc3']\n        },\n        {\n            'codec': 'avc3',\n            'compatibleCodecs': ['avc1']\n        }\n    ];\n\n    function setup() {\n        debug = Debug(context).getInstance();\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n\n        boxParser = BoxParser(context).getInstance();\n\n        fragmentController = FragmentController(context).create({\n            mediaPlayerModel: mediaPlayerModel,\n            dashMetrics: dashMetrics,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser,\n            dashConstants: DashConstants,\n            urlUtils: urlUtils\n        });\n\n        registerEvents();\n    }\n\n    function registerEvents() {\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n    }\n\n    function unRegisterEvents() {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n    }\n\n    function registerProtectionEvents() {\n        if (protectionController) {\n            eventBus.on(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.on(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.on(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.on(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.on(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.on(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function unRegisterProtectionEvents() {\n        if (protectionController) {\n            eventBus.off(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.off(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.off(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.off(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.off(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.off(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function initialize(StreamInfo, ProtectionController) {\n        streamInfo = StreamInfo;\n        protectionController = ProtectionController;\n        registerProtectionEvents();\n    }\n\n    /**\n     * Activates Stream by re-initializing some of its components\n     * @param {MediaSource} mediaSource\n     * @memberof Stream#\n     * @param {SourceBuffer} previousBuffers\n     */\n    function activate(mediaSource, previousBuffers) {\n        if (!isStreamActivated) {\n            let result;\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n            if (!getPreloaded()) {\n                result = initializeMedia(mediaSource, previousBuffers);\n            } else {\n                initializeAfterPreload();\n                result = previousBuffers;\n            }\n            isStreamActivated = true;\n            return result;\n        }\n        return previousBuffers;\n    }\n\n    /**\n     * Partially resets some of the Stream elements\n     * @memberof Stream#\n     * @param {boolean} keepBuffers\n     */\n    function deactivate(keepBuffers) {\n        let ln = streamProcessors ? streamProcessors.length : 0;\n        const errored = false;\n        for (let i = 0; i < ln; i++) {\n            let fragmentModel = streamProcessors[i].getFragmentModel();\n            fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());\n            streamProcessors[i].reset(errored, keepBuffers);\n        }\n        streamProcessors = [];\n        isStreamActivated = false;\n        isMediaInitialized = false;\n        setPreloaded(false);\n        eventBus.off(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n    }\n\n    function isActive() {\n        return isStreamActivated;\n    }\n\n    function setMediaSource(mediaSource) {\n        for (let i = 0; i < streamProcessors.length;) {\n            if (isMediaSupported(streamProcessors[i].getMediaInfo())) {\n                streamProcessors[i].setMediaSource(mediaSource);\n                i++;\n            } else {\n                streamProcessors[i].reset();\n                streamProcessors.splice(i,1);\n            }\n        }\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state\n            //so do this after the buffers are created above.\n            streamProcessors[i].dischargePreBuffer();\n        }\n\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg +  'nostreams', manifestModel.getValue()));\n            logger.fatal(msg);\n        }\n    }\n\n    function resetInitialSettings() {\n        deactivate();\n        streamInfo = null;\n        updateError = {};\n        isUpdating = false;\n    }\n\n    function reset() {\n\n        stopEventController();\n\n        if (playbackController) {\n            playbackController.pause();\n        }\n\n        if (fragmentController) {\n            fragmentController.reset();\n            fragmentController = null;\n        }\n\n        resetInitialSettings();\n\n        unRegisterEvents();\n\n        unRegisterProtectionEvents();\n\n        setPreloaded(false);\n    }\n\n    function getDuration() {\n        return streamInfo ? streamInfo.duration : NaN;\n    }\n\n    function getStartTime() {\n        return streamInfo ? streamInfo.start : NaN;\n    }\n\n    function getId() {\n        return streamInfo ? streamInfo.id : null;\n    }\n\n    function getStreamInfo() {\n        return streamInfo;\n    }\n\n    function getFragmentController() {\n        return fragmentController;\n    }\n\n    function getThumbnailController() {\n        return thumbnailController;\n    }\n\n    function checkConfig() {\n        if (!videoModel || !abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Array}\n     * @memberof Stream#\n     */\n    function getBitrateListFor(type) {\n        checkConfig();\n        if (type === Constants.IMAGE) {\n            if (!thumbnailController) {\n                return [];\n            }\n            return thumbnailController.getBitrateList();\n        }\n        const mediaInfo = getMediaInfo(type);\n        return abrController.getBitrateList(mediaInfo);\n    }\n\n    function startEventController() {\n        if (eventController) {\n            eventController.start();\n        }\n    }\n\n    function stopEventController() {\n        if (eventController) {\n            eventController.stop();\n        }\n    }\n\n    function onProtectionError(event) {\n        if (event.error) {\n            errHandler.error(event.error);\n            logger.fatal(event.error.message);\n            reset();\n        }\n    }\n\n    function isMediaSupported(mediaInfo) {\n        const type = mediaInfo ? mediaInfo.type : null;\n        let codec,\n            msg;\n\n        if (type === Constants.MUXED) {\n            msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';\n            logger.fatal(msg);\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));\n            return false;\n        }\n\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT || type === Constants.EMBEDDED_TEXT || type === Constants.IMAGE) {\n            return true;\n        }\n        codec = mediaInfo.codec;\n        logger.debug(type + ' codec: ' + codec);\n\n        if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIAKEYS_ERROR_CODE, Errors.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));\n        } else if (!capabilities.supportsCodec(codec)) {\n            msg = type + 'Codec (' + codec + ') is not supported.';\n            logger.error(msg);\n            return false;\n        }\n\n        return true;\n    }\n\n    function onCurrentTrackChanged(e) {\n        if (!streamInfo || e.newMediaInfo.streamInfo.id !== streamInfo.id) return;\n        let mediaInfo = e.newMediaInfo;\n        let manifest = manifestModel.getValue();\n\n        adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);\n\n        let processor = getProcessorForMediaInfo(mediaInfo);\n        if (!processor) return;\n\n        let currentTime = playbackController.getTime();\n        logger.info('Stream -  Process track changed at current time ' + currentTime);\n\n        logger.debug('Stream -  Update stream controller');\n        if (manifest.refreshManifestOnSwitchTrack) {\n            logger.debug('Stream -  Refreshing manifest for switch track');\n            trackChangedEvent = e;\n            manifestUpdater.refreshManifest();\n        } else {\n            processor.selectMediaInfo(mediaInfo);\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\n                abrController.updateTopQualityIndex(mediaInfo);\n                processor.switchTrackAsked();\n                processor.getFragmentModel().abortRequests();\n            } else {\n                processor.getScheduleController().setSeekTarget(currentTime);\n                processor.setIndexHandlerTime(currentTime);\n                processor.resetIndexHandler();\n            }\n        }\n    }\n\n    function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {\n        let streamProcessor = StreamProcessor(context).create({\n            type: mediaInfo ? mediaInfo.type : null,\n            mimeType: mediaInfo ? mediaInfo.mimeType : null,\n            timelineConverter: timelineConverter,\n            adapter: adapter,\n            manifestModel: manifestModel,\n            mediaPlayerModel: mediaPlayerModel,\n            dashMetrics: config.dashMetrics,\n            baseURLController: config.baseURLController,\n            stream: instance,\n            abrController: abrController,\n            playbackController: playbackController,\n            mediaController: mediaController,\n            streamController: config.streamController,\n            textController: textController,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser\n        });\n\n        streamProcessor.initialize(mediaSource);\n        abrController.updateTopQualityIndex(mediaInfo);\n\n        if (optionalSettings) {\n            streamProcessor.setBuffer(optionalSettings.buffer);\n            streamProcessor.setIndexHandlerTime(optionalSettings.currentTime);\n            streamProcessors[optionalSettings.replaceIdx] = streamProcessor;\n        } else {\n            streamProcessors.push(streamProcessor);\n        }\n\n        if (optionalSettings && optionalSettings.ignoreMediaInfo) {\n            return;\n        }\n\n        if (mediaInfo && (mediaInfo.type === Constants.TEXT || mediaInfo.type === Constants.FRAGMENTED_TEXT)) {\n            let idx;\n            for (let i = 0; i < allMediaForType.length; i++) {\n                if (allMediaForType[i].index === mediaInfo.index) {\n                    idx = i;\n                }\n                streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor\n            }\n            streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info\n        } else {\n            streamProcessor.addMediaInfo(mediaInfo, true);\n        }\n    }\n\n    function initializeMediaForType(type, mediaSource) {\n        const allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);\n\n        let mediaInfo = null;\n        let initialMediaInfo;\n\n        if (!allMediaForType || allMediaForType.length === 0) {\n            logger.info('No ' + type + ' data.');\n            return;\n        }\n\n        for (let i = 0, ln = allMediaForType.length; i < ln; i++) {\n            mediaInfo = allMediaForType[i];\n\n            if (type === Constants.EMBEDDED_TEXT) {\n                textController.addEmbeddedTrack(mediaInfo);\n            } else {\n                if (!isMediaSupported(mediaInfo)) continue;\n                mediaController.addTrack(mediaInfo);\n            }\n        }\n\n        if (type === Constants.EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {\n            return;\n        }\n\n        if (type === Constants.IMAGE) {\n            thumbnailController = ThumbnailController(context).create({\n                adapter: adapter,\n                baseURLController: config.baseURLController,\n                stream: instance,\n                timelineConverter: config.timelineConverter,\n                debug: debug,\n                eventBus: eventBus,\n                events: Events,\n                dashConstants: DashConstants\n            });\n            return;\n        }\n\n        if (type !== Constants.FRAGMENTED_TEXT || (type === Constants.FRAGMENTED_TEXT && textController.getTextDefaultEnabled())) {\n            mediaController.checkInitialMediaSettingsForType(type, streamInfo);\n            initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);\n        }\n\n        if (type === Constants.FRAGMENTED_TEXT && !textController.getTextDefaultEnabled()) {\n            initialMediaInfo = mediaController.getTracksFor(type, streamInfo)[0];\n        }\n\n        eventBus.trigger(Events.STREAM_INITIALIZING, {\n            streamInfo: streamInfo,\n            mediaInfo: mediaInfo\n        });\n\n        // TODO : How to tell index handler live/duration?\n        // TODO : Pass to controller and then pass to each method on handler?\n\n        createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);\n    }\n\n    function initializeEventController () {\n        //if initializeMedia is called from a switch period, eventController could have been already created.\n        if (!eventController) {\n            eventController = EventController(context).create();\n\n            eventController.setConfig({\n                manifestUpdater: manifestUpdater,\n                playbackController: playbackController\n            });\n            addInlineEvents();\n        }\n    }\n\n    function addInlineEvents () {\n        const events = adapter.getEventsFor(streamInfo);\n        eventController.addInlineEvents(events);\n    }\n\n    function addInbandEvents (events) {\n        if (eventController) {\n            eventController.addInbandEvents(events);\n        }\n    }\n\n    function initializeMedia(mediaSource, previousBuffers) {\n        checkConfig();\n        let element = videoModel.getElement();\n\n        initializeEventController();\n\n        isUpdating = true;\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        if (!element || (element && (/^VIDEO$/i).test(element.nodeName))) {\n            initializeMediaForType(Constants.VIDEO, mediaSource);\n        }\n        initializeMediaForType(Constants.AUDIO, mediaSource);\n        initializeMediaForType(Constants.TEXT, mediaSource);\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n        initializeMediaForType(Constants.MUXED, mediaSource);\n        initializeMediaForType(Constants.IMAGE, mediaSource);\n\n        //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.\n        const buffers = createBuffers(previousBuffers);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\n            logger.fatal(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n\n        return buffers;\n    }\n\n    function initializeAfterPreload() {\n        isUpdating = true;\n        checkConfig();\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\n            logger.debug(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n    }\n\n    function filterCodecs(type) {\n        const realAdaptation = adapter.getAdaptationForType(streamInfo ? streamInfo.index : null, type, streamInfo);\n\n        if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;\n\n        // Filter codecs that are not supported\n        realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter((_, i) => {\n            // keep at least codec from lowest representation\n            if (i === 0) return true;\n\n            const codec = adapter.getCodec(realAdaptation, i, true);\n            if (!capabilities.supportsCodec(codec)) {\n                logger.error('[Stream] codec not supported: ' + codec);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    function checkIfInitializationCompleted() {\n        const ln = streamProcessors.length;\n        const hasError = !!updateError.audio || !!updateError.video;\n        let error = hasError ? new DashJSError(Errors.DATA_UPDATE_FAILED_ERROR_CODE, Errors.DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;\n\n        for (let i = 0; i < ln; i++) {\n            if (streamProcessors[i].isUpdating() || isUpdating) {\n                return;\n            }\n        }\n\n        if (!isMediaInitialized) {\n            return;\n        }\n\n        if (protectionController) {\n            // Need to check if streamProcessors exists because streamProcessors\n            // could be cleared in case an error is detected while initializing DRM keysystem\n            for (let i = 0; i < ln && streamProcessors[i]; i++) {\n                if (streamProcessors[i].getType() === Constants.AUDIO ||\n                    streamProcessors[i].getType() === Constants.VIDEO ||\n                    streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                    protectionController.initializeForMedia(streamProcessors[i].getMediaInfo());\n                }\n            }\n        }\n\n        if (error) {\n            errHandler.error(error);\n        } else {\n            eventBus.trigger(Events.STREAM_INITIALIZED, {\n                streamInfo: streamInfo\n            });\n        }\n    }\n\n    function getMediaInfo(type) {\n        let streamProcessor = null;\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            streamProcessor = streamProcessors[i];\n\n            if (streamProcessor.getType() === type) {\n                return streamProcessor.getMediaInfo();\n            }\n        }\n\n        return null;\n    }\n\n    function createBuffers(previousBuffers) {\n        const buffers = {};\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            const buffer = streamProcessors[i].createBuffer(previousBuffers);\n            if (buffer) {\n                buffers[streamProcessors[i].getType()] = buffer.getBuffer();\n            }\n        }\n        return buffers;\n    }\n\n    function onBufferingCompleted(e) {\n        if (e.streamInfo !== streamInfo) {\n            return;\n        }\n\n        let processors = getProcessors();\n        const ln = processors.length;\n\n        if (ln === 0) {\n            logger.warn('onBufferingCompleted - can\\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');\n            return;\n        }\n\n        // if there is at least one buffer controller that has not completed buffering yet do nothing\n        for (let i = 0; i < ln; i++) {\n            //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED\n            if (!processors[i].isBufferingCompleted() && (processors[i].getType() === Constants.AUDIO || processors[i].getType() === Constants.VIDEO)) {\n                logger.warn('onBufferingCompleted - One streamProcessor has finished but', processors[i].getType(), 'one is not buffering completed');\n                return;\n            }\n        }\n\n        logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');\n        eventBus.trigger(Events.STREAM_BUFFERING_COMPLETED, {\n            streamInfo: streamInfo\n        });\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (!streamInfo || e.sender.getStreamId() !== streamInfo.id) return;\n\n        updateError[e.sender.getType()] = e.error;\n        checkIfInitializationCompleted();\n    }\n\n    function getProcessorForMediaInfo(mediaInfo) {\n        if (!mediaInfo) {\n            return null;\n        }\n\n        let processors = getProcessors();\n\n        return processors.filter(function (processor) {\n            return (processor.getType() === mediaInfo.type);\n        })[0];\n    }\n\n    function getProcessors() {\n        let arr = [];\n\n        let type,\n            streamProcessor;\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            streamProcessor = streamProcessors[i];\n            type = streamProcessor.getType();\n\n            if (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) {\n                arr.push(streamProcessor);\n            }\n        }\n\n        return arr;\n    }\n\n    function updateData(updatedStreamInfo) {\n        logger.info('Manifest updated... updating data system wide.');\n\n        isStreamActivated = false;\n        isUpdating = true;\n        streamInfo = updatedStreamInfo;\n\n        if (eventController) {\n            addInlineEvents();\n        }\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            let streamProcessor = streamProcessors[i];\n            let mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());\n            abrController.updateTopQualityIndex(mediaInfo);\n            streamProcessor.addMediaInfo(mediaInfo, true);\n        }\n\n        if (trackChangedEvent) {\n            let mediaInfo = trackChangedEvent.newMediaInfo;\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\n                let processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);\n                if (!processor) return;\n                processor.switchTrackAsked();\n                trackChangedEvent = undefined;\n            }\n        }\n\n        isUpdating = false;\n        checkIfInitializationCompleted();\n    }\n\n    function isMediaCodecCompatible(newStream) {\n        return compareCodecs(newStream, Constants.VIDEO) && compareCodecs(newStream, Constants.AUDIO);\n    }\n\n    function isProtectionCompatible(stream) {\n        return compareProtectionConfig(stream, Constants.VIDEO) && compareProtectionConfig(stream, Constants.AUDIO);\n    }\n\n    function compareProtectionConfig(stream, type) {\n        if (!stream) {\n            return false;\n        }\n        const newStreamInfo = stream.getStreamInfo();\n        const currentStreamInfo = getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        // If any of the periods requires EME, we can't do smooth transition\n        if (newAdaptation.ContentProtection || currentAdaptation.ContentProtection) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function compareCodecs(newStream, type) {\n        if (!newStream || !newStream.hasOwnProperty('getStreamInfo') ) {\n            return false;\n        }\n        const newStreamInfo = newStream.getStreamInfo();\n        const currentStreamInfo = getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        const sameMimeType =  newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;\n        const oldCodecs = currentAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const newCodecs = newAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const codecMatch = newCodecs.some((newCodec) => {\n            return oldCodecs.indexOf(newCodec) > -1;\n        });\n\n        const partialCodecMatch = newCodecs.some((newCodec) => oldCodecs.some((oldCodec) => codecRootCompatibleWithCodec(oldCodec, newCodec)));\n        return codecMatch || (partialCodecMatch && sameMimeType);\n    }\n\n    // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table\n    function codecRootCompatibleWithCodec(codec1, codec2) {\n        const codecRoot = codec1.split('.')[0];\n        const rootCompatible = codec2.indexOf(codecRoot) === 0;\n        let compatTableCodec;\n        for (let i = 0; i < codecCompatibilityTable.length; i++) {\n            if (codecCompatibilityTable[i].codec === codecRoot) {\n                compatTableCodec = codecCompatibilityTable[i];\n                break;\n            }\n        }\n        if (compatTableCodec) {\n            return rootCompatible || compatTableCodec.compatibleCodecs.some((compatibleCodec) => codec2.indexOf(compatibleCodec) === 0);\n        }\n        return rootCompatible;\n    }\n\n    function setPreloaded(value) {\n        preloaded = value;\n    }\n\n    function getPreloaded() {\n        return preloaded;\n    }\n\n    function preload(mediaSource, previousBuffers) {\n        initializeEventController();\n\n        initializeMediaForType(Constants.VIDEO, mediaSource);\n        initializeMediaForType(Constants.AUDIO, mediaSource);\n        initializeMediaForType(Constants.TEXT, mediaSource);\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n        initializeMediaForType(Constants.MUXED, mediaSource);\n        initializeMediaForType(Constants.IMAGE, mediaSource);\n\n        createBuffers(previousBuffers);\n\n        eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n        for (let i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {\n            streamProcessors[i].getScheduleController().start();\n        }\n\n        setPreloaded(true);\n    }\n\n\n    instance = {\n        initialize: initialize,\n        activate: activate,\n        deactivate: deactivate,\n        isActive: isActive,\n        getDuration: getDuration,\n        getStartTime: getStartTime,\n        getId: getId,\n        getStreamInfo: getStreamInfo,\n        preload: preload,\n        getFragmentController: getFragmentController,\n        getThumbnailController: getThumbnailController,\n        getBitrateListFor: getBitrateListFor,\n        startEventController: startEventController,\n        stopEventController: stopEventController,\n        updateData: updateData,\n        reset: reset,\n        getProcessors: getProcessors,\n        setMediaSource: setMediaSource,\n        isMediaCodecCompatible: isMediaCodecCompatible,\n        isProtectionCompatible: isProtectionCompatible,\n        getPreloaded: getPreloaded,\n        addInbandEvents: addInbandEvents\n    };\n\n    setup();\n    return instance;\n}\n\nStream.__dashjs_factory_name = 'Stream';\nexport default FactoryMaker.getClassFactory(Stream);\n"]}